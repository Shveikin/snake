"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Color = void 0;
const HEXRegex_1 = require("./HEXRegex");
const NamedColors_1 = require("./NamedColors");
const RGBRegex_1 = require("./RGBRegex");
class Color {
    constructor(color) {
        this.r = 0;
        this.g = 0;
        this.b = 0;
        if (typeof color === 'string') {
            const hex = NamedColors_1.NAMED_COLORS.get(color.toUpperCase());
            if (typeof hex !== 'undefined') {
                return Color.fromHex(hex);
            }
            if (Color.isRgb(color))
                return Color.fromRgb(color);
            if (Color.isHex(color))
                return Color.fromHex(color);
            throw new Error(`Color ${color} can't be parsed`);
        }
        else {
            this.setR(color.r);
            this.setG(color.g);
            this.setB(color.b);
        }
    }
    static isNamed(color) {
        return NamedColors_1.NAMED_COLORS.has(color.toUpperCase());
    }
    static isRgb(rgb) {
        return RGBRegex_1.RGB_REGEX.test(rgb);
    }
    static isHex(hex) {
        return HEXRegex_1.HEX_REGEX.test(hex);
    }
    static fromRgb(rgb) {
        const match = RGBRegex_1.RGB_REGEX.exec(rgb);
        if (match === null || typeof match.groups === 'undefined') {
            throw new Error(`Unrecognized RGB pattern: ${rgb}`);
        }
        const { red, green, blue } = match.groups;
        return this.create({
            r: parseInt(red, 10),
            g: parseInt(green, 10),
            b: parseInt(blue, 10),
        });
    }
    static fromHex(hex) {
        const match = HEXRegex_1.HEX_REGEX.exec(hex);
        if (match === null || typeof match.groups === 'undefined') {
            throw new Error(`Unrecognized HEX pattern: ${hex}`);
        }
        const { red, green, blue } = match.groups;
        return this.create({
            r: parseInt(red, 16),
            g: parseInt(green, 16),
            b: parseInt(blue, 16),
        });
    }
    static create(color) {
        return new this(color);
    }
    getR() {
        return Math.round(this.r);
    }
    setR(value) {
        this.r = Math.max(0, Math.min(value, 255));
        return this;
    }
    getG() {
        return Math.round(this.g);
    }
    setG(value) {
        this.g = Math.max(0, Math.min(value, 255));
        return this;
    }
    getB() {
        return Math.round(this.b);
    }
    setB(value) {
        this.b = Math.max(0, Math.min(value, 255));
        return this;
    }
    toRgb() {
        return { r: this.getR(), g: this.getG(), b: this.getB() };
    }
    toHex() {
        const red = this.getR().toString(16).padStart(2, '0');
        const green = this.getG().toString(16).padStart(2, '0');
        const blue = this.getB().toString(16).padStart(2, '0');
        return `#${[red, green, blue].join('')}`;
    }
}
exports.Color = Color;
//# sourceMappingURL=Color.js.map