/// <reference types="node" />
import { IColor } from '../color/Color';
import { Cell } from '../cell/Cell';
import { ICanvasOptions } from './CanvasOptions';
import { IDisplayOptions } from '../cell/DisplayOptions';
import { WriteStream } from 'tty';
export declare class Canvas implements ICanvasOptions {
    readonly cells: Cell[];
    lastFrame: string[];
    stream: WriteStream;
    width: number;
    height: number;
    cursorX: number;
    cursorY: number;
    cursorBackground: IColor;
    cursorForeground: IColor;
    cursorDisplay: IDisplayOptions;
    constructor(options?: Partial<ICanvasOptions>);
    static create(options?: Partial<ICanvasOptions>): Canvas;
    write(data: string): Canvas;
    flush(): Canvas;
    getPointerFromXY(x?: number, y?: number): number;
    getXYFromPointer(index: number): [number, number];
    up(y?: number): Canvas;
    down(y?: number): Canvas;
    right(x?: number): Canvas;
    left(x?: number): Canvas;
    moveBy(x: number, y: number): Canvas;
    moveTo(x: number, y: number): Canvas;
    foreground(color: string): Canvas;
    background(color: string): Canvas;
    bold(isBold?: boolean): Canvas;
    dim(isDim?: boolean): Canvas;
    underlined(isUnderlined?: boolean): Canvas;
    blink(isBlink?: boolean): Canvas;
    reverse(isReverse?: boolean): Canvas;
    hidden(isHidden?: boolean): Canvas;
    erase(x1: number, y1: number, x2: number, y2: number): Canvas;
    eraseToEnd(): Canvas;
    eraseToStart(): Canvas;
    eraseToDown(): Canvas;
    eraseToUp(): Canvas;
    eraseLine(): Canvas;
    eraseScreen(): Canvas;
    saveScreen(): Canvas;
    restoreScreen(): Canvas;
    hideCursor(): Canvas;
    showCursor(): Canvas;
    reset(): Canvas;
}
//# sourceMappingURL=Canvas.d.ts.map