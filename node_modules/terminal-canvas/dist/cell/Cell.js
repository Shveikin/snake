"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = void 0;
const DisplayModes_1 = require("./DisplayModes");
const encodeToVT100_1 = require("../encodeToVT100");
class Cell {
    constructor(char, options) {
        this.isModified = false;
        this.char = ' ';
        this.x = 0;
        this.y = 0;
        this.background = { r: -1, g: -1, b: -1 };
        this.foreground = { r: -1, g: -1, b: -1 };
        this.display = {
            blink: false,
            bold: false,
            dim: false,
            hidden: false,
            reverse: false,
            underlined: false,
        };
        this.setChar(char);
        if (typeof (options === null || options === void 0 ? void 0 : options.x) !== 'undefined') {
            this.setX(options.x);
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.y) !== 'undefined') {
            this.setY(options.y);
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.background) !== 'undefined') {
            this.setBackground(options.background.r, options.background.g, options.background.b);
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.foreground) !== 'undefined') {
            this.setForeground(options.foreground.r, options.foreground.g, options.foreground.b);
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.display) !== 'undefined') {
            this.setDisplay(options.display);
        }
    }
    static create(char, options) {
        return new this(char, options);
    }
    getChar() {
        return this.char;
    }
    setChar(char) {
        this.char = char.slice(0, 1);
        return this;
    }
    getX() {
        return this.x;
    }
    setX(x) {
        this.x = Math.floor(x);
        return this;
    }
    getY() {
        return this.y;
    }
    setY(y) {
        this.y = Math.floor(y);
        return this;
    }
    getBackground() {
        return this.background;
    }
    setBackground(r, g, b) {
        this.background = { r, g, b };
        return this;
    }
    resetBackground() {
        this.background = { r: -1, g: -1, b: -1 };
        return this;
    }
    getForeground() {
        return this.foreground;
    }
    setForeground(r, g, b) {
        this.foreground = { r, g, b };
        return this;
    }
    resetForeground() {
        this.foreground = { r: -1, g: -1, b: -1 };
        return this;
    }
    getDisplay() {
        return this.display;
    }
    setDisplay(display) {
        this.display = {
            blink: typeof display.blink === 'undefined' ? false : display.blink,
            bold: typeof display.bold === 'undefined' ? false : display.bold,
            dim: typeof display.dim === 'undefined' ? false : display.dim,
            hidden: typeof display.hidden === 'undefined' ? false : display.hidden,
            reverse: typeof display.reverse === 'undefined' ? false : display.reverse,
            underlined: typeof display.underlined === 'undefined' ? false : display.underlined,
        };
        return this;
    }
    resetDisplay() {
        this.display = {
            blink: false,
            bold: false,
            dim: false,
            hidden: false,
            reverse: false,
            underlined: false,
        };
        return this;
    }
    reset() {
        this.setChar(' ');
        this.resetBackground();
        this.resetForeground();
        this.resetDisplay();
        this.isModified = true;
        return this;
    }
    toString() {
        const { background, foreground, char, y, x } = this;
        const { bold, dim, underlined, blink, reverse, hidden } = this.display;
        return (encodeToVT100_1.encodeToVT100(`[${y + 1};${x + 1}f`) +
            (background.r > -1 ? encodeToVT100_1.encodeToVT100(`[48;2;${background.r};${background.g};${background.b}m`) : '') +
            (foreground.r > -1 ? encodeToVT100_1.encodeToVT100(`[38;2;${foreground.r};${foreground.g};${foreground.b}m`) : '') +
            (bold ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.BOLD}m`) : '') +
            (dim ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.DIM}m`) : '') +
            (underlined ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.UNDERLINED}m`) : '') +
            (blink ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.BLINK}m`) : '') +
            (reverse ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.REVERSE}m`) : '') +
            (hidden ? encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.HIDDEN}m`) : '') +
            char +
            encodeToVT100_1.encodeToVT100(`[${DisplayModes_1.DISPLAY_MODES.RESET_ALL}m`));
    }
}
exports.Cell = Cell;
//# sourceMappingURL=Cell.js.map